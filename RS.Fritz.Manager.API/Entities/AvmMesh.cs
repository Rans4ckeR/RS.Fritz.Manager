//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------

// package NSwag.MSBuild
// <Target Name="NSwag" BeforeTargets="Compile">
//   <Exec WorkingDirectory="$(ProjectDir)" Command="$(NSwagExe_Net90) jsonschema2csclient /input:OpenAPIs\AvmMesh.json /output:Entities\AvmMesh.cs /Name:AvmMesh /Namespace:RS.Fritz.Manager.API /GenerateNullableReferenceTypes:true /GenerateOptionalPropertiesAsNullable:true /ClassStyle:Poco /JsonLibrary:SystemTextJson" />
// </Target>

// [JsonConverter(typeof(JsonStringEnumConverter))] missing on enum definitions
// [JsonStringEnumMemberName] should be used instead of [EnumMember] on enum members
// [JsonConverter(typeof(DeviceMeshStreamConfigurationArrayJsonConverter))] with type DeviceMeshStreamConfiguration[]? should be used instead of ICollection<Tuple<string, int>>?
// Wan_counters.Last_update shoud be long instead of int
// Bytes.Rx & Bytes.Tx shoud be long instead of int
// [JsonStringEnumMemberName(@"")] empty strings not supported (https://github.com/dotnet/runtime/issues/107367)

#nullable enable


namespace RS.Fritz.Manager.API
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    internal partial class AvmMesh
    {
        /// <summary>
        /// Schema Version used for the FRITZ!OS topology JSON dump
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("schema_version")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public AvmMeshSchema_version Schema_version { get; set; } = default!;

        /// <summary>
        /// List of all involved devices
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nodes")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Nodes> Nodes { get; set; } = new System.Collections.ObjectModel.Collection<Nodes>();



        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum AvmMeshSchema_version
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"7.8")]
        _7_8 = 0,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Nodes
    {
        /// <summary>
        /// Unique identifier of the device
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("uid")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; } = default!;

        /// <summary>
        /// Friendly name of the device. Value can be null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("device_friendly_name")]
        public string? Device_friendly_name { get; set; } = default!;

        /// <summary>
        /// Name of the device
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("device_name")]
        public string? Device_name { get; set; } = default!;

        /// <summary>
        /// Vendor class identifier of the device learned via DHCP. Value can be null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("device_vendor_class_id")]
        public string? Device_vendor_class_id { get; set; } = default!;

        /// <summary>
        /// Device model, e.g. FRITZ!Box 7590
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("device_model")]
        public string? Device_model { get; set; } = default!;

        /// <summary>
        /// Device manufacturer, e.g. AVM
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("device_manufacturer")]
        public string? Device_manufacturer { get; set; } = default!;

        /// <summary>
        /// Device firmware version, e.g. 154.06.92-57341
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("device_firmware_version")]
        public string? Device_firmware_version { get; set; } = default!;

        /// <summary>
        /// MAC address of the device
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("device_mac_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Device_mac_address { get; set; } = default!;

        /// <summary>
        /// (Non-)unique identifier of the device which represents a chassis ID according to LLDP (IEEE-802.1AB-2016, 8.5.2.3 chassis ID). Value can be null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("device_id")]
        public Device_id? Device_id { get; set; } = default!;

        /// <summary>
        /// Capabilities of the device according to LLDP (IEEE-802.1AB-2016, 8.5.8.1 system capabilities). Value can be null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("device_capabilities")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<Device_capabilities>? Device_capabilities { get; set; } = default!;

        /// <summary>
        /// Enabled capabilities of the device according to LLDP (IEEE-802.1AB-2016, 8.5.8.2 enabled capabilities). Value can be null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("enabled_device_capabilities")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<Enabled_device_capabilities>? Enabled_device_capabilities { get; set; } = default!;

        /// <summary>
        /// Indicates the device is part of AVM mesh
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("is_meshed")]
        public bool? Is_meshed { get; set; } = default!;

        /// <summary>
        /// The AVM mesh role of the device
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mesh_role")]
        public NodesMesh_role? Mesh_role { get; set; } = default!;

        /// <summary>
        /// The version of the meshd on this device; 0.0 if unknown
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("meshd_version")]
        public string? Meshd_version { get; set; } = default!;

        /// <summary>
        /// Current metrics of this node
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metrics")]
        [System.ComponentModel.DataAnnotations.Required]
        public Metrics Metrics { get; set; } = new Metrics();

        /// <summary>
        /// List of all available interfaces of this device
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("node_interfaces")]
        public System.Collections.Generic.ICollection<Node_interfaces>? Node_interfaces { get; set; } = default!;


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Device_id
    {
        /// <summary>
        /// Subtype according to LLDP (IEEE-802.1AB-2016, 8.5.2.2 chassis ID subtype)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subtype")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public Device_idSubtype Subtype { get; set; } = default!;

        /// <summary>
        /// A value that matches subtype, e.g. 'E0:28:6D:76:3C:7C' if subtype is 'MAC_ADDRESS' or '192.168.178.1' if subtype is 'NETWORK_ADDRESS'
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; } = default!;


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum Device_capabilities
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"OTHER")]
        OTHER = 0,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"REPEATER")]
        REPEATER = 1,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"MAC_BRIDGE_COMPONENT")]
        MAC_BRIDGE_COMPONENT = 2,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"WLAN_ACCESS_POINT")]
        WLAN_ACCESS_POINT = 3,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"ROUTER")]
        ROUTER = 4,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"TELEPHONE")]
        TELEPHONE = 5,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"DOCSIS_CABLE_DEVICE")]
        DOCSIS_CABLE_DEVICE = 6,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"STATION_ONLY")]
        STATION_ONLY = 7,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"C_VLAN_COMPONENT")]
        C_VLAN_COMPONENT = 8,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"S_VLAN_COMPONENT")]
        S_VLAN_COMPONENT = 9,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"TWO_PORT_MAC_RELAY_COMPONENT")]
        TWO_PORT_MAC_RELAY_COMPONENT = 10,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"RESERVED_FIELD_1")]
        RESERVED_FIELD_1 = 11,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"RESERVED_FIELD_2")]
        RESERVED_FIELD_2 = 12,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"RESERVED_FIELD_3")]
        RESERVED_FIELD_3 = 13,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"RESERVED_FIELD_4")]
        RESERVED_FIELD_4 = 14,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"RESERVED_FIELD_5")]
        RESERVED_FIELD_5 = 15,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"INVALID_MAX")]
        INVALID_MAX = 16,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum Enabled_device_capabilities
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"OTHER")]
        OTHER = 0,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"REPEATER")]
        REPEATER = 1,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"MAC_BRIDGE_COMPONENT")]
        MAC_BRIDGE_COMPONENT = 2,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"WLAN_ACCESS_POINT")]
        WLAN_ACCESS_POINT = 3,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"ROUTER")]
        ROUTER = 4,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"TELEPHONE")]
        TELEPHONE = 5,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"DOCSIS_CABLE_DEVICE")]
        DOCSIS_CABLE_DEVICE = 6,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"STATION_ONLY")]
        STATION_ONLY = 7,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"C_VLAN_COMPONENT")]
        C_VLAN_COMPONENT = 8,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"S_VLAN_COMPONENT")]
        S_VLAN_COMPONENT = 9,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"TWO_PORT_MAC_RELAY_COMPONENT")]
        TWO_PORT_MAC_RELAY_COMPONENT = 10,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"RESERVED_FIELD_1")]
        RESERVED_FIELD_1 = 11,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"RESERVED_FIELD_2")]
        RESERVED_FIELD_2 = 12,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"RESERVED_FIELD_3")]
        RESERVED_FIELD_3 = 13,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"RESERVED_FIELD_4")]
        RESERVED_FIELD_4 = 14,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"RESERVED_FIELD_5")]
        RESERVED_FIELD_5 = 15,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"INVALID_MAX")]
        INVALID_MAX = 16,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum NodesMesh_role
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"unknown")]
        Unknown = 0,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"master")]
        Master = 1,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"slave")]
        Slave = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Metrics
    {
        /// <summary>
        /// WAN counters of this node
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wan_counters")]
        public Wan_counters? Wan_counters { get; set; } = default!;


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Node_interfaces
    {
        /// <summary>
        /// Unique identifier of this interface
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("uid")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; } = default!;

        /// <summary>
        /// Interface name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Interface type, e.g. LAN or WLAN
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public Node_interfacesType Type { get; set; } = default!;

        /// <summary>
        /// Interface MAC address. Might be zero for unconfigured interfaces.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mac_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Mac_address { get; set; } = default!;

        /// <summary>
        /// Unique identifier of the associated node
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("node_uid")]
        public string? Node_uid { get; set; } = default!;

        /// <summary>
        /// Indicates if this interface has been blocked for traffic flow to prevent a network loop
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("blocking_state")]
        public Node_interfacesBlocking_state? Blocking_state { get; set; } = default!;

        /// <summary>
        /// Connection links
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("node_links")]
        public System.Collections.Generic.ICollection<Node_links>? Node_links { get; set; } = default!;

        /// <summary>
        /// LAN: Has a link been detected on this interface? Value can be null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("link_detected")]
        public bool? Link_detected { get; set; } = default!;

        /// <summary>
        /// LAN: Current data rate in kbit/s. Value can be null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cur_data_rate")]
        public int? Cur_data_rate { get; set; } = default!;

        /// <summary>
        /// LAN: Current rx interface availability in percent. Value can be null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cur_availability_rx")]
        public int? Cur_availability_rx { get; set; } = default!;

        /// <summary>
        /// LAN: Current tx interface availability in percent. Value can be null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cur_availability_tx")]
        public int? Cur_availability_tx { get; set; } = default!;

        /// <summary>
        /// LAN: Does this LAN interface speak LLDP? Value can be null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lldp_active")]
        public bool? Lldp_active { get; set; } = default!;

        /// <summary>
        /// MLD MAC address this interface is affiliated with, according to IEEE 802.11be D3.0)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mld_mac_address")]
        public string? Mld_mac_address { get; set; } = default!;

        /// <summary>
        /// Link ID iff interface is in MLO, according to IEEE 802.11be D3.0 Link ID (35.3.3.2)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("link_id")]
        public int? Link_id { get; set; } = default!;

        /// <summary>
        /// Shows uplink TID to link mapping for MLD
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ul_ttlm")]
        public System.Collections.Generic.ICollection<string>? Ul_ttlm { get; set; } = default!;

        /// <summary>
        /// Shows downlink TID to link mapping for MLD
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dl_ttlm")]
        public System.Collections.Generic.ICollection<string>? Dl_ttlm { get; set; } = default!;

        /// <summary>
        /// WLAN: SSID name. Might be empty for unconfigured interfaces.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ssid")]
        public string? Ssid { get; set; } = default!;

        /// <summary>
        /// WLAN: Operation mode of this interface. In case of an error, expect other values than defined in the enum field.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("opmode")]
        public Node_interfacesOpmode? Opmode { get; set; } = default!;

        /// <summary>
        /// WLAN: Security algorithm
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("security")]
        public Node_interfacesSecurity? Security { get; set; } = default!;

        /// <summary>
        /// WLAN: Tx properties. Table representing possible stream configurations for a certain channel width.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("supported_streams_tx")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DeviceMeshStreamConfigurationArrayJsonConverter))]
        public DeviceMeshStreamConfiguration[]? Supported_streams_tx { get; set; } = default!;

        /// <summary>
        /// WLAN: Rx properties. Table representing possible stream configurations for a certain channel width.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("supported_streams_rx")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DeviceMeshStreamConfigurationArrayJsonConverter))]
        public DeviceMeshStreamConfiguration[]? Supported_streams_rx { get; set; } = default!;

        /// <summary>
        /// WLAN: Currently used primary WLAN channel
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("current_channel")]
        public int? Current_channel { get; set; } = default!;

        /// <summary>
        /// WLAN: Description of the currently used WIFI channel
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("current_channel_info")]
        public Current_channel_info? Current_channel_info { get; set; } = default!;

        /// <summary>
        /// ID of the radio this interface is associated with
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("radio_id")]
        public System.Collections.Generic.ICollection<int>? Radio_id { get; set; } = default!;

        /// <summary>
        /// WLAN and PLC: Percentage value of current channel/medium utilization [NOTE PLC: 255 - indicates value is unknown!]
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("channel_utilization")]
        public int? Channel_utilization { get; set; } = default!;

        /// <summary>
        /// WLAN: Average noise and interference power indicator in dBm [NOTE: 255 - indicates value is unknown!]
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("anpi")]
        public int? Anpi { get; set; } = default!;

        /// <summary>
        /// WLAN: Steering of this interface is enabled.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("steering_enabled")]
        public bool? Steering_enabled { get; set; } = default!;

        /// <summary>
        /// WLAN: Beacon Reporting seems to work with this interface and client is capable of it.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("11k_friendly")]
        public bool? _11k_friendly { get; set; } = default!;

        /// <summary>
        /// WLAN: BSS Transition Management seems to work with this interface and client is capable of it.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("11v_friendly")]
        public bool? _11v_friendly { get; set; } = default!;

        /// <summary>
        /// WLAN: Legacy Steering seems to work with this interface.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("legacy_friendly")]
        public bool? Legacy_friendly { get; set; } = default!;

        /// <summary>
        /// WLAN: Beacon report RCPI measurements seem to be encoded as described in Table 9-154 of IEEE802.11 (2016).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rrm_compliant")]
        public bool? Rrm_compliant { get; set; } = default!;

        /// <summary>
        /// IEEE 802.11be MLO Modes that are possible on the associated interface radio.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mlo_modes")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<Mlo_modes>? Mlo_modes { get; set; } = default!;

        /// <summary>
        /// WLAN: Currently selected Phymodes. Might be empty for unconfigured interfaces. In case of an error, expect other values than defined in the enum field.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phymodes")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<Phymodes>? Phymodes { get; set; } = default!;

        /// <summary>
        /// WLAN: Rating of the connected uplink rcpi.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("client_position")]
        public Node_interfacesClient_position? Client_position { get; set; } = default!;

        /// <summary>
        /// WLAN: List of all channels this interface can operate on
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("channel_list")]
        public System.Collections.Generic.ICollection<Channel_list>? Channel_list { get; set; } = default!;


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum Device_idSubtype
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"RESERVED")]
        RESERVED = 0,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"CHASSIS_COMPONENT")]
        CHASSIS_COMPONENT = 1,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"INTERFACE_ALIAS")]
        INTERFACE_ALIAS = 2,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"PORT_COMPONENT")]
        PORT_COMPONENT = 3,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"MAC_ADDRESS")]
        MAC_ADDRESS = 4,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"NETWORK_ADDRESS")]
        NETWORK_ADDRESS = 5,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"INTERFACE_NAME")]
        INTERFACE_NAME = 6,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"LOCALLY_ASSIGNED")]
        LOCALLY_ASSIGNED = 7,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"INVALID_MAX")]
        INVALID_MAX = 8,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Wan_counters
    {
        /// <summary>
        /// UNIX timestamp in milliseconds of the last time the WAN counters were updated
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last_update")]
        public long Last_update { get; set; } = default!;

        /// <summary>
        /// Number of bytes this node has received from/sent to the WAN
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bytes")]
        [System.ComponentModel.DataAnnotations.Required]
        public Bytes Bytes { get; set; } = new Bytes();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum Node_interfacesType
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"unknown")]
        Unknown = 0,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"LAN")]
        LAN = 1,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"WLAN")]
        WLAN = 2,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"PLC")]
        PLC = 3,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"DECT")]
        DECT = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum Node_interfacesBlocking_state
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"UNKNOWN")]
        UNKNOWN = 0,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"NOT_BLOCKED")]
        NOT_BLOCKED = 1,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"BLOCKED")]
        BLOCKED = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Node_links
    {
        /// <summary>
        /// Unique identifier of this link
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("uid")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; } = default!;

        /// <summary>
        /// Link type, e.g. LAN or WLAN
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public Node_linksType Type { get; set; } = default!;

        /// <summary>
        /// Connection state
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public Node_linksState State { get; set; } = default!;

        /// <summary>
        /// UNIX timestamp when this link was last connected
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last_connected")]
        public int? Last_connected { get; set; } = default!;

        /// <summary>
        /// First endpoint node uid of this link
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("node_1_uid")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Node_1_uid { get; set; } = default!;

        /// <summary>
        /// Second endpoint node uid of this link
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("node_2_uid")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Node_2_uid { get; set; } = default!;

        /// <summary>
        /// First endpoint node interface uid of this link
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("node_interface_1_uid")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Node_interface_1_uid { get; set; } = default!;

        /// <summary>
        /// Second endpoint node interface uid of this link
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("node_interface_2_uid")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Node_interface_2_uid { get; set; } = default!;

        /// <summary>
        /// Maximum rx data rate in kbit/s from node 2 to node 1
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("max_data_rate_rx")]
        public int? Max_data_rate_rx { get; set; } = default!;

        /// <summary>
        /// Maximum tx data rate in kbit/s from node 1 to node 2
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("max_data_rate_tx")]
        public int? Max_data_rate_tx { get; set; } = default!;

        /// <summary>
        /// Current rx data rate in kbit/s from node 2 to node 1
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cur_data_rate_rx")]
        public int? Cur_data_rate_rx { get; set; } = default!;

        /// <summary>
        /// Current tx data rate in kbit/s from node 1 to node 2
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cur_data_rate_tx")]
        public int? Cur_data_rate_tx { get; set; } = default!;

        /// <summary>
        /// Current rx link availability in percent from node 1 to node 2 [NOTE: 255 - indicates value is unknown!]
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cur_availability_rx")]
        public int? Cur_availability_rx { get; set; } = default!;

        /// <summary>
        /// Current tx link availability in percent from node 1 to node 2 [NOTE: 255 - indicates value is unknown!]
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cur_availability_tx")]
        public int? Cur_availability_tx { get; set; } = default!;

        /// <summary>
        /// LAN: Was this link learned via LLDP? Value can be null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("learned_via_lldp")]
        public bool? Learned_via_lldp { get; set; } = default!;

        /// <summary>
        /// WLAN: Receive signal to noise indicator in dB measured at node 1 [NOTE: 255 - indicates value is unknown!]
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rx_rsni")]
        public int? Rx_rsni { get; set; } = default!;

        /// <summary>
        /// WLAN: Receive signal to noise indicator in dB measured at node 2 [NOTE: 255 - indicates value is unknown!]
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tx_rsni")]
        public int? Tx_rsni { get; set; } = default!;

        /// <summary>
        /// WLAN: Receive channel power indicator in dBm measured at node 1 [NOTE: 255 - indicates value is unknown!]
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rx_rcpi")]
        public int? Rx_rcpi { get; set; } = default!;

        /// <summary>
        /// WLAN: Receive channel power indicator in dBm measured at node 2 [NOTE: 255 - indicates value is unknown!]
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tx_rcpi")]
        public int? Tx_rcpi { get; set; } = default!;


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum Node_interfacesOpmode
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"AP")]
        AP = 0,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"AP_GUEST")]
        AP_GUEST = 1,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"ATACLIENT")]
        ATACLIENT = 2,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"WDS_REPEATER")]
        WDS_REPEATER = 3,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"REPEATER")]
        REPEATER = 4,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"HS_2.0")]
        HS_2_0 = 5,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"AP_OWE")]
        AP_OWE = 6,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"AP_GUEST_OWE")]
        AP_GUEST_OWE = 7,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"HS_2.0_OWE")]
        HS_2_0_OWE = 8,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"STATION")]
        STATION = 9,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"AP_UNSPECIFIED")]
        AP_UNSPECIFIED = 10,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"AP_UNSPECIFIED_MLD")]
        AP_UNSPECIFIED_MLD = 11,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"AP_MLD")]
        AP_MLD = 12,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"AP_GUEST_MLD")]
        AP_GUEST_MLD = 13,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"AP_HOTSPOT_MLD")]
        AP_HOTSPOT_MLD = 14,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"STATION_MLD")]
        STATION_MLD = 15,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"REPEATER_MLD")]
        REPEATER_MLD = 16,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"INVALID")]
        INVALID = 17,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum Node_interfacesSecurity
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"UNDEFINED")]
        UNDEFINED = 0,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"NONE")]
        NONE = 1,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"WEP_OPEN")]
        WEP_OPEN = 2,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"WEP_SHARED")]
        WEP_SHARED = 3,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"WPAPSK")]
        WPAPSK = 4,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"WPA2PSK")]
        WPA2PSK = 5,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"WPA_WPA2_MIXED")]
        WPA_WPA2_MIXED = 6,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"WPAENT")]
        WPAENT = 7,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"WPA2ENT")]
        WPA2ENT = 8,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"WPA3PSK")]
        WPA3PSK = 9,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"WPA2_WPA3_MIXED")]
        WPA2_WPA3_MIXED = 10,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"OWE")]
        OWE = 11,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"INVALID")]
        INVALID = 12,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"INVALID WLAN SECURITY MODE")]
        INVALID_WLAN_SECURITY_MODE = 13,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Current_channel_info
    {
        /// <summary>
        /// Primary frequency in kHz. Value can be null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("primary_freq")]
        public int? Primary_freq { get; set; } = default!;

        /// <summary>
        /// Primary segment center frequency in kHz. Value can be null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("primary_center")]
        public int? Primary_center { get; set; } = default!;

        /// <summary>
        /// Current channel width. Value can be null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("channel_width")]
        public Current_channel_infoChannel_width? Channel_width { get; set; } = default!;

        /// <summary>
        /// Channel Puncturing map value, where each bit represents a 20 MHz sub-channel in the segment. A 1 indicates that this sub-channel is disabled.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("puncturing_map")]
        public int? Puncturing_map { get; set; } = default!;

        /// <summary>
        /// Secondary segment center frequency in kHz. Value will be null if channel_width is null. If non-null, it will be 0 unless channel_width is 80+80 MHz.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("secondary_center")]
        public int? Secondary_center { get; set; } = default!;

        /// <summary>
        /// Maximum power used on this channel in dBm. Value can be null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("max_power")]
        public int? Max_power { get; set; } = default!;


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum Mlo_modes
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"xxxxxxxxxxxxxxxx")]
        Empty = 0,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"STR")]
        STR = 1,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"NSTR")]
        NSTR = 2,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"EMLSR")]
        EMLSR = 3,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"EMLMR")]
        EMLMR = 4,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"RESERVED_0")]
        RESERVED_0 = 5,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"RESERVED_1")]
        RESERVED_1 = 6,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"RESERVED_2")]
        RESERVED_2 = 7,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"RESERVED_3")]
        RESERVED_3 = 8,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"INVALID MAX")]
        INVALID_MAX = 9,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum Phymodes
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"xxxxxxxxxxxxxxxx")]
        Empty = 0,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"a")]
        A = 1,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"b")]
        B = 2,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"g")]
        G = 3,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"n")]
        N = 4,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"ac")]
        Ac = 5,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"ax")]
        Ax = 6,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"be")]
        Be = 7,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"INVALID MAX")]
        INVALID_MAX = 8,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum Node_interfacesClient_position
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"too_close")]
        Too_close = 0,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"too_far")]
        Too_far = 1,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"ok")]
        Ok = 2,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"unknown")]
        Unknown = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Channel_list
    {
        /// <summary>
        /// Channel ID for this entry
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("channel")]
        public int Channel { get; set; } = default!;

        /// <summary>
        /// Frequency of this entry in kHz
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public int Frequency { get; set; } = default!;


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Bytes
    {
        /// <summary>
        /// Number of bytes received from the WAN at the IP layer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rx")]
        public long Rx { get; set; } = default!;

        /// <summary>
        /// Number of bytes sent to the WAN at the IP layer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tx")]
        public long Tx { get; set; } = default!;


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum Node_linksType
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"unknown")]
        Unknown = 0,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"LAN")]
        LAN = 1,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"WLAN")]
        WLAN = 2,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"PLC")]
        PLC = 3,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"DECT")]
        DECT = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum Node_linksState
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"DISCONNECTED")]
        DISCONNECTED = 0,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"CONNECTED")]
        CONNECTED = 1,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum Current_channel_infoChannel_width
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"20 MHz")]
        _20_MHz = 0,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"40 MHz")]
        _40_MHz = 1,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"80 MHz")]
        _80_MHz = 2,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"160 MHz")]
        _160_MHz = 3,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"80+80 MHz")]
        _80_80_MHz = 4,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"320 MHz")]
        _320_MHz = 5,


        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"INVALID")]
        INVALID = 6,


    }
}